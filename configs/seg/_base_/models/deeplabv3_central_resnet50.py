# model settings
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    # pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(type='Central_Model',
                  backbone_name='resnet',
                  task_names=('gv_patch', 'gv_global'),
                  main_task_name='gv_global',
                  trans_type='crossconvhrnetlayer',
                  task_name_to_backbone={
                      'gv_global':
                      dict(num_stages=4,
                           out_indices=(0, 1, 2, 3),
                           norm_cfg=norm_cfg,
                           norm_eval=True,
                           style='pytorch',
                           contract_dilation=True),
                      'gv_patch':
                      dict(num_stages=4,
                           out_indices=(0, 1, 2, 3),
                           norm_cfg=norm_cfg,
                           norm_eval=True,
                           style='pytorch',
                           contract_dilation=True),
                  },
                  layer2channel={
                      'layer1': 256,
                      'layer2': 512,
                      'layer3': 1024
                  },
                  layer2auxlayers={
                      'layer1': [
                          'layer1',
                      ],
                      'layer2': [
                          'layer1',
                          'layer2',
                      ],
                      'layer3': ['layer1', 'layer2', 'layer3'],
                  },
                  trans_layers=['layer1', 'layer2', 'layer3'],
                  channels=[64, 128, 192],
                  return_tuple=False),
    decode_head=dict(type='ASPPHead',
                     in_channels=2048,
                     in_index=3,
                     channels=512,
                     dilations=(1, 12, 24, 36),
                     dropout_ratio=0.1,
                     num_classes=19,
                     norm_cfg=norm_cfg,
                     align_corners=False,
                     loss_decode=dict(type='CrossEntropyLoss',
                                      use_sigmoid=False,
                                      loss_weight=1.0)),
    auxiliary_head=dict(type='FCNHead',
                        in_channels=1024,
                        in_index=2,
                        channels=256,
                        num_convs=1,
                        concat_input=False,
                        dropout_ratio=0.1,
                        num_classes=19,
                        norm_cfg=norm_cfg,
                        align_corners=False,
                        loss_decode=dict(type='CrossEntropyLoss',
                                         use_sigmoid=False,
                                         loss_weight=0.4)),
    # model training and testing settings
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
